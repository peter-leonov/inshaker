worker_processes 2;

error_log logs/nginx.log notice;
pid       var/nginx.inshaker.pid;

events { worker_connections 256; }


http
{
  server_tokens off;
  # limit_rate 16k;

  #pro: auth_basic_user_file users.htpasswd;

  include mime.types;
  default_type text/html;

  access_log off;

  sendfile on;
  keepalive_timeout 90;

  gzip on;
  gzip_disable msie6;
  gzip_comp_level 9;
  gzip_types text/plain application/x-javascript text/css;

  ssi on;
  ssi_types text/css application/x-javascript;
  charset utf-8;

  server_names_hash_bucket_size 48;

  error_page 404 /404.html;

  add_header 'X-UA-Compatible' 'chrome=1';
  add_header 'Set-Cookie' 'Oops=disabled; path=/';

  upstream rails
  {
    # any parameters are ingnored for a single server
    server 127.0.0.1:3000;
  }

  # Global temp dir for backend responses.
  # "
  #  It is thus recommended that for any given location both cache and a directory holding temporary files,
  #  set by the proxy_temp_path directive, are put on the same file system.
  # "
  # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path 
  proxy_temp_path var/tmp/proxy;
  proxy_cache_path
    # same FS as in proxy_temp_path
    var/cache/rails
    # directory hierarhy: 65029c -> /c/29/65029c
    levels=1:2
    # shared memory zone has to fit in memory
    keys_zone=rails:64m
    # purge shared memory items after
    inactive=1d
    # whole on-disk cache size (maintained by the "cache manager" process)
    max_size=1g;


  server
  {
    listen 8003;
    server_name _;
    return 301 http://www.inshaker.ru$request_uri;
  }

  server
  {
    listen 8003;
    server_name ~^[A-Za-z\-]+\.dev\.inshaker\.ru$;
    server_name_in_redirect off;
    port_in_redirect off;

    large_client_header_buffers 8 16k;

    root htdocs/;
    expires -1;

    index index.html;
    log_not_found off;

    location = /404.html
    {
      internal;
    }

    location /cocktail/
    {
      location ~^/cocktail/([a-zA-Z0-9_\-\.]+)/$
      {
        try_files /cocktail/$1/$1.html /cocktail/$1/index.html =404;
      }
    }

    location /bar/
    {
      location ~^/bar/([a-zA-Z0-9_\-\.]+)/$
      {
        try_files /bar/$1/$1.html /bar/$1/index.html =404;
      }
    }

    location /party/
    {
      location ~ ^/party/([a-zA-Z0-9_\-\.]+)/$
      {
        try_files /party/$1/$1.html /party/$1/index.html =404;
      }
    }

    location = /party/
    {
      try_files /party/parties.html =404;
    }

    location = /blog/
    {
      try_files /blog/blog.html =404;
    }

    location /blog/
    {
      location ~ ^/blog/([a-zA-Z0-9_\-\.]+)/$
      {
        try_files /blog/$1/$1.html /blog/$1/index.html =404;
      }
    }

    location /rating/
    {
      return 301 /ratings/;
    }

    location = /ratings/
    {
      try_files /ratings/ratings.html =404;
    }

    location /check-da-age/
    {
      index check-da-age.html;
    }

    location = /mybar/
    {
      try_files /mybar/mybar.html =404;
    }

    # legacy redirections
    location = /ingredients.html
    {
      return 301 /combinator.html;
    }

    location = /matching.html
    {
      return 301 /combinator.html;
    }

    location /cocktails/
    {
      location ~^/cocktails/([a-zA-Z0-9_\-\.]+)\.html
      {
        set $name $1;
        return 301 /cocktail/$name/;
      }
    }

    location /gruppy-kokteyley/
    {
      location ~ ^/gruppy-kokteyley/([a-zA-Z0-9_\-\.]+)/$
      {
        try_files /gruppy-kokteyley/$1/$1.html =404;
      }
    }

    location = /gruppy-kokteyley/
    {
      try_files /gruppy-kokteyley/gruppy-kokteyley.html =404;
    }

    location = /about/
    {
      try_files /about/about.html =404;
    }

    location /skin/
    {
      location ~ \.css$
      {
        error_page 404 /skin/404.css;
      }

      location ~ \.js$
      {
        error_page 404 /skin/404.js;
      }
    }

    # embedded liby
    location /liby/
    {
      location /liby/tests/
      {
        alias htdocs/liby/tests/;
        autoindex on;
      }

      error_page 404 /404.js?$uri;
    }

    location /tests/
    {
      autoindex on;
    }

    location = /robots.txt
    {
      if ($host != www.inshaker.ru)
      {
        rewrite ^ /robots.disallow.txt break;
      }
      rewrite ^ /robots.allow.txt break;
    }

    location /reporter/
    {
      index reporter.html;
      #pro: auth_basic "Inshaker Admin Zone ;)";
    }

    location /ssioff/
    {
      alias htdocs/;
      ssi off;
    }

    # growing rails section

    #####################
    # proxy_pass section
    #####################
    
    # Allow rails to serve for different host names.
    proxy_set_header   Host             $host;
    # Good old client IP proxying.
    proxy_set_header   X-Forwarded-For  $remote_addr;
    
    # clean up a little
    proxy_hide_header X-Request-Id;
    proxy_hide_header X-Runtime;

    # Allow nginx handle HTTP errors with error_page directive.
    proxy_intercept_errors on;

    #####################
    # proxy_cache section
    #####################

    # cache successful responses for longer
    proxy_cache_valid  200 302 301 404  1y;
    # cache others for shorter, allows debuging on production
    proxy_cache_valid  any  10s;

    # "
    # By default, the directiveâ€™s value is close to the string:
    #   proxy_cache_key $scheme$proxy_host$request_uri;
    # "
    # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_key

    # Enable a queue based on cache_key preventing more than one request
    # actually hit the backend.
    proxy_cache_lock on;
    # Other requests should wait 60 secs for the first to finish
    # and then use its cached results.
    proxy_cache_lock_timeout 60;

    # use cached version even if it's stale (junk, garbage, rubbish, shit)
    proxy_cache_use_stale
      # in addition to proxy_cache_lock
      # while other erlier request is in progress of fetching the new version
      updating
      # on backend network or backend server failure
      error timeout invalid_header
      # or on the backend application failure
      http_500 http_502 http_503 http_504;

    # based on uses cache every responce, i.e. cache it from the first request
    proxy_cache_min_uses 0;

    # indicate the request was served from cache
    add_header X-Cache-Status $upstream_cache_status;


    location = /
    {
      proxy_pass    http://rails;
      proxy_cache   rails;
    }
    location /products/
    {
      proxy_pass    http://rails;
      proxy_cache   rails;
    }

    location /uploads/
    {
      proxy_pass    http://rails;
      proxy_cache   rails;
    }

    location /admin/
    {
      proxy_pass    http://rails;
    }
    location /assets/
    {
      proxy_pass    http://rails;
    }


    # not yet rails backends

    location /act/
    {
      proxy_pass    http://www.inshaker.ru/act/;
    }

    location /storage/v1/
    {
      proxy_pass    http://www.inshaker.ru/storage/v1/;
    }

    location /_/worker/
    {
      proxy_pass    http://127.0.0.1:34543/;
    }
  }

  server
  {
    listen 8003;
    server_name ~^m\.[A-Za-z\-]+\.inshaker\.ru$ ~^m\.[A-Za-z\-]+\.dev\.inshaker\.ru$;

    location /
    {
      proxy_pass  http://127.0.0.1:4000;
      proxy_redirect  http://localhost/  http://$host/;
      proxy_buffering  off;
    }
  }
}
