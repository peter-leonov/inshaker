/*
 * © 2007 http://www.markup.programica.ru/
 * Author - Kornilov Pavel
 */

@import url(ie.css);

.main-wrapper-container{ zoom:1; }
.content .pager { zoom: 1; }

.content .pager .numbers a.now,
.content .sort-by a.now { width: 1px; white-space: nowrap; }
/* png fix */
.bg-png-crop
{
	filter	: expression(
		(runtimeStyle.filter == '') ? runtimeStyle.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src='+currentStyle.backgroundImage.split('\"')[1]+', sizingMethod=crop)' : runtimeStyle.filter,
		runtimeStyle.backgroundImage = 'none');
}
.content .tooltip .bg .bg
{
	filter	: expression(
		(runtimeStyle.backgroundImage != 'none') ? runtimeStyle.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src='+currentStyle.backgroundImage.split('\"')[1]+', sizingMethod=scale)' : runtimeStyle.filter,
		runtimeStyle.backgroundImage = 'none');
}
img.this-src-png
{
	width: expression(width);
	filter: expression( (runtimeStyle.filter == '') ? runtimeStyle.filter="progid:DXImageTransform.Microsoft.AlphaImageLoader(src='"+src+"', sizingMethod='image')" : '',
						src = '/i/0.gif');
}
/* Позиционируем по аналогии с бэкграундом
   Только для no-repeat!
*/
.content .tooltip,
.content .tooltip .bg
{
	behavior		: expression(
						(runtimeStyle.behavior==''&&currentStyle.backgroundImage!='none') ?
							insertAdjacentHTML('afterBegin', '<div class="ie"" style="height:1;width:1;position:absolute;'
								+((currentStyle.backgroundPositionX!='100%'&&currentStyle.backgroundPositionX!='right') ? 'left:'+((currentStyle.backgroundPositionX == 'left') ? 0 : currentStyle.backgroundPositionX ) : 'right:0')+';'
								+((currentStyle.backgroundPositionY!='100%'&&currentStyle.backgroundPositionY!='bottom') ? ';top:'+((currentStyle.backgroundPositionY == 'top') ? 0 : currentStyle.backgroundPositionY ) : 'bottom:0')
								+';filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='+currentStyle.backgroundImage.split('\"')[1]+', sizingMethod=crop)">'+'<img src="'+currentStyle.backgroundImage.split('\"')[1]+'" alt="" style="visibility:hidden" /></div>') : '',
						runtimeStyle.backgroundImage = 'none',
						runtimeStyle.behavior = 'none'
					);
}

.content .tooltip .bg { height: expression((parentNode.offsetHeight-108) + 'px') }
.content .tooltip .bg .bg { height: 100%; }


/* position: fixed */
html { background-attachment: fixed; }
.position-fixed
{
	position		: absolute;
	top				: expression(parseInt(document.documentElement.scrollTop, 10) + "px");
}

.add-hover-class-for-any-elements
{
	behavior		: expression(
						onmouseover = function() {this.className += ' hover'},
						onmouseout = function() {this.className = this.className.replace(/ hover/g, "")},
						runtimeStyle.behavior = 'none'
					);
}

.max-width { width : expression(document.body.clientWidth > 920 ? "92em" : "auto"); }
.height-100-percantage { height: expression(document.body.clientHeight+'px'); }
.border-color-transparent
{
	filter			: chroma(color=cyan);
	border-color	: cyan;
}


/* input[type=...] */
form .where-input
{
	background-color: expression(this.getAttribute("type") && (this.getAttribute("type")=="file" || this.getAttribute("type")=="text") ? "#5f5f5f" : "inherit");
	border			: expression(this.getAttribute("type") && this.getAttribute("type")=="text" ? "3px solid #5f5f5f" : "inherit");
	color			: expression(this.getAttribute("type") && (this.getAttribute("type")=="file" || this.getAttribute("type")=="text") ? "#8f8f8f" : "inherit");
	display			: expression(this.getAttribute("type") && (this.getAttribute("type")=="file" || this.getAttribute("type")=="text") ? "block" : "inherit");
	margin			: expression(this.getAttribute("type") && (this.getAttribute("type")=="file" || this.getAttribute("type")=="text") ? "5px 0 0 0" : "inherit");
	padding			: expression(this.getAttribute("type") && (this.getAttribute("type")=="file" || this.getAttribute("type")=="text") ? "0 2px" : "inherit");
	width			: expression(this.getAttribute("type") && (this.getAttribute("type")=="file" || this.getAttribute("type")=="text") ? "315px" : "inherit");
}

.img-for-em
{
	height		: expression(runtimeStyle.height = (height/10)+'em');
	width		: expression(runtimeStyle.width = (width/10)+'em');
}

.wrapper-vertical-align-middle
{
	margin-top: expression(
						((parentNode.offsetHeight/2)-parseInt(offsetHeight)/2) < 0 ? "0" :
						(parentNode.offsetHeight/2)-(parseInt(offsetHeight)/2) +'px'
					);
}

.first-child
{
	background-color: expression(this.parentNode.currentStyle.color)
	behavior		: expression( (this == parentNode.firstChild) ? className += ' first-child' : '', runtimeStyle.behavior = 'none' )
}

.inherit
{
	background-color: expression( runtimeStyle.backgroundColor = parentNode.currentStyle.backgroundColor);
}

