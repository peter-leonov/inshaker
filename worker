#!/usr/bin/env ruby
require 'socket'

Dir.chdir(File.dirname($PROGRAM_NAME))

HOST = "127.0.0.1"
PORT = 34543

class PostForkingHTTPServer

  def initialize host, port
    @host = host
    @port = port
    
    @log = $stdout.dup
    @server = TCPServer.new(HOST, PORT)
    
    puts "Listening at #{HOST}:#{PORT}"
    warn "WARNING: You better hide me behind nginx, as I'm a careless webserver!"
  end
  
  def listen_loop
    loop do
      client = @server.accept

      # run the job in a worker
      child = fork do
        # worker doesn't need a server socket
        @server.close

        # redirect all output to the client socket
        $stdout.reopen(client)
        $stdout.sync = true
        $stderr.reopen($stdout)
        
        process_request client
        
        # never return from a child
        exit!
      end

      # be free, my boy
      Process.detach child

      # server doesn't need a client socket
      client.close
    end
  end
  
  def process_request client
    first_line = client.gets
    m = %r{^GET /([a-zA-Z\-\.]{1,25})}.match(first_line)
    unless m
      # render the minimal HTTP 1.0 header
      print "HTTP/1.0 400 Bad Request\r\n"
      print "\r\n" # end of header
      puts "This server expects only GET /abc-def.xyz requests. Thank you."
      return
    end

    job = m[1]
    @log.puts job
    command = "./worker-jobs/#{job}"

    unless File.exists?(command)
      # render the minimal HTTP 1.0 header
      print "HTTP/1.0 404 Not Found\r\n"
      print "\r\n" # end of header
      puts "Not found."
      return
    end

    # render the minimal HTTP 1.0 header
    print "HTTP/1.0 200 OK\r\n"
    print "Content-Type: text/plain\r\n"
    print "\r\n" # end of header

    # hooray! finally, do the job
    Process.exec(command, "--worker")
  end
end

s = PostForkingHTTPServer.new(HOST, PORT).listen_loop
