#!/usr/bin/env ruby
require 'socket'
require 'optparse'

class PostForkingHTTPServer

  def initialize options
    @options = options
    
    start
  end
  
  def start
    # name ourselves in top and ps
    $0 = "worker (ruby)"
    
    Signal.trap(:TERM, method(:stop))
    Signal.trap(:QUIT, method(:stop))
    Signal.trap(:INT,  method(:stop))
    
    @server = TCPServer.new(@options[:host], @options[:port])
    pidfile = File.open(@options[:pidfile], "w")
    puts "Listening at http://#{@options[:host]}:#{@options[:port]}, pidfile: #{@options[:pidfile]}"
    warn "WARNING: You better hide me behind nginx, as I'm a careless webserver!"
    
    if @options[:daemonize]
      puts "Detaching from console (daemonizing), see you at: ps ax | grep ruby"
      # Daemonize the process and stay in the current directory
      Process.daemon(true)
    end
    @log = $stdout.dup
    # if daemonized pid has changed, so save the new pid after Process.daemon
    pidfile.print Process.pid
  end
  
  def stop *garbage
    File.unlink(@options[:pidfile])
    puts "Worker stoped."
    exit
  end
  
  def listen_loop
    loop do
      client = @server.accept

      # run the job in a worker
      child = fork do
        # worker doesn't need a server socket
        @server.close

        # redirect all output to the client socket
        $stdout.reopen(client)
        $stdout.sync = true
        $stderr.reopen($stdout)
        
        process_request client
        
        # never return from a child
        exit!
      end

      # be free, my boy
      Process.detach child

      # server doesn't need a client socket
      client.close
    end
  end
  
  def process_request client
    first_line = client.gets # GET|POST /bla-bla.bla123 HTTP/1.1
    m = %r{^(?:GET|POST) /([a-zA-Z0-9\-\.]{1,25}) }.match(first_line)
    unless m
      # render the minimal HTTP 1.0 header
      print "HTTP/1.0 400 Bad Request\r\n"
      print "\r\n" # end of header
      puts "This server expects only GET|POST /abc-def.xyz requests. Thank you."
      return
    end

    job = m[1]
    @log.puts job
    command = "./worker-jobs/#{job}"

    unless File.exists?(command)
      # render the minimal HTTP 1.0 header
      print "HTTP/1.0 404 Not Found\r\n"
      print "\r\n" # end of header
      puts "Not found."
      return
    end

    # render the minimal HTTP 1.0 header
    print "HTTP/1.0 200 OK\r\n"
    print "Content-Type: text/plain\r\n"
    print "\r\n" # end of header

    # hooray! finally, do the job
    Process.exec(command, "--worker")
  end
end


Dir.chdir(File.dirname($PROGRAM_NAME))

options = {
  host: "127.0.0.1",
  port: 34543,
  pidfile: "var/worker.pid",
  daemonize: false
}

OptionParser.new do |opts|
  opts.banner = "Usage: worker [options]"
  opts.on("-h", "--host", "Host to bind to (default: #{options[:host]})") do |v|
    options[:host] = v
  end
  opts.on("-p", "--port", "Port to bind to (default: #{options[:port]})") do |v|
    options[:port] = v
  end
  opts.on("-i", "--pid", "Pidfile path (default: #{options[:pidfile]})") do |v|
    options[:pidfile] = v
  end
  opts.on("-d", "--daemonize", "Detach from console (default: #{options[:daemonize]})") do |v|
    options[:daemonize] = v
  end
end.parse!

s = PostForkingHTTPServer.new(options).listen_loop
